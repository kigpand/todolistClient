{"version":3,"sources":["pages/Home.tsx","recoil/recoil.tsx","components/LoginInput.tsx","config/config.ts","components/LoginBtn.tsx","components/Join.tsx","pages/Login.tsx","components/TodoListItem.tsx","components/TodoListCalendar.tsx","components/TodoListLogOutBtn.tsx","components/TodoListTime.tsx","components/TodoListSub.tsx","components/TodoListMain.tsx","components/TodoListDialog.tsx","pages/TodoList.tsx","pages/Main.tsx","images/background.jpg","App.tsx","index.tsx"],"names":["HomeWrapper","styled","div","Home","className","to","todoListArray","atom","key","default","date","Date","item","listDate","getFullYear","getMonth","getDate","userInfo","id","nick","InputWrapper","LoginInput","onSetId","onSetPw","type","onChange","e","target","value","url","BtnWrapper","LoginBtn","pw","onJoinDialog","history","useHistory","setUserData","useSetRecoilState","onLoginSubmit","a","axios","post","then","data","result","alert","sessionStorage","setItem","push","onClick","JoinWrapper","Join","closeJoinDialog","useState","nickName","setUserInfo","idCheck","setIdCheck","pwCheck","setPwCheck","pwCheckFlag","setPwCheckFlag","useEffect","onJoinId","onJoinNick","onJoinPw","onPwCheck","catch","err","console","error","LoginWrapper","Login","loginInfo","setLoginInfo","onJoin","setOnJoin","ItemWrapper","props","checkColor","fontColor","TodoListItem","list","onItemRemove","todoState","setTodoState","content","SubStyled","TodoListCalendar","onCalendar","setOnCalendar","todoList","useRecoilValue","setListDateValue","EventAvailable","calendarType","LogOutWrapper","TodoListLogOutBtn","onLogOut","ExitToApp","TimeWrapper","TodoListTime","time","setTime","timer","setInterval","clearInterval","getHours","getMinutes","getSeconds","SubWrapper","TodoListSub","MainWrapper","TodoListMain","onOpenDialog","useRecoilState","userData","listDateValue","setTodoList","userId","v","map","items","user_id","parse","log","filter","isNaN","DialogWrapper","TodoListDialog","onCloseDialog","textRef","useRef","ref","current","boardInfo","TodoWrapper","TodoList","dialog","setDialog","Main","useLayoutEffect","getItem","AppWrapper","App","src","BACKGROUND","alt","path","exact","component","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.e33656b8.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst HomeWrapper = styled.div`\r\n  width : 100vw;\r\n  height : 100vh;\r\n  display : flex;\r\n  flex-direction : column;\r\n  align-items : center;\r\n  justify-content : center;\r\n\r\n  .title{\r\n    text-align : center;\r\n    font-family: \"HSYuji-Regular\";\r\n    font-size : 2rem;\r\n\r\n    div{\r\n      margin-top : 1rem;\r\n    }\r\n  }\r\n\r\n  .loginBtn{\r\n    margin-top : 3rem;\r\n    width : 200px;\r\n    height : 50px;\r\n    background-color : lightgreen;\r\n    color : white;\r\n    display : flex;\r\n    align-items : center;\r\n    justify-content : center;\r\n    font-weight : bold;\r\n    font-size : 1.5rem;\r\n    font-family: \"ImcreSoojin\";\r\n\r\n    &:hover{\r\n      background-color : green;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 1000px) {\r\n    .title{\r\n      font-size: 0.8rem;\r\n    }\r\n  }  \r\n`;\r\nconst Home = () =>{\r\n  return(\r\n    <HomeWrapper>\r\n      <div className = \"title\">\r\n        <div>By failing to prepare, you are preparing to fail.</div>\r\n        <div>준비에 실패하는 것은 실패를 준비하는 것이다.</div>\r\n        <div>- 벤자민 프랭클린 -</div>\r\n      </div>\r\n      <li className=\"loginBtn\"><Link to=\"/Main\">Login</Link></li>\r\n    </HomeWrapper>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n\r\n","import { atom } from 'recoil';\r\n\r\nexport interface TodoItemType {\r\n    id : number;\r\n    userId: string;\r\n    content : string;\r\n}\r\n\r\nexport interface TodoListType {\r\n    date : Date;\r\n    item : TodoItemType[];\r\n}\r\n\r\ninterface UserInfo {\r\n    id : string;\r\n    nick : string;\r\n}\r\n\r\nexport const todoListArray = atom<TodoListType>({\r\n    key: \"todoListArray\",\r\n    default: { date : new Date(\"\"), item : []}\r\n})\r\n\r\nexport const listDate = atom<string>({\r\n    key: \"listDate\",\r\n    default: `${new Date().getFullYear()}-${new Date().getMonth()+1}-${new Date().getDate()}`\r\n})\r\n\r\nexport const userInfo = atom<UserInfo>({\r\n    key: \"userInfo\",\r\n    default: { id: \"\", nick: \"\"}\r\n})","import styled from 'styled-components';\r\n\r\nconst InputWrapper = styled.div`\r\n    width : 100%;\r\n    display : flex;\r\n    flex-direction : column;\r\n    align-items : center;\r\n    margin-bottom: 4rem;\r\n\r\n    .idContainer,\r\n    .pwContainer{\r\n        width : 70%;\r\n        display : flex;\r\n        flex-direction : column;\r\n        margin-bottom: 2rem;\r\n\r\n        input{\r\n            margin-top : 0.3rem;\r\n            border : none;\r\n            border-bottom : 2px solid black;\r\n            outline : none;\r\n            height : 30px;\r\n            background-color : transparent;\r\n        }\r\n    }\r\n`;\r\n\r\ninterface Props {\r\n    onSetId: (id: string) => void;\r\n    onSetPw: (pw: string) => void;\r\n}\r\nconst LoginInput  = ({ onSetId, onSetPw} : Props) =>{\r\n\r\n    return(\r\n        <InputWrapper>\r\n            <div className=\"idContainer\">\r\n                <label className=\"idLabel\">UserId</label>\r\n                <input type=\"text\" className=\"idInput\" onChange={(e)=>{onSetId(e.target.value)}}/>\r\n            </div>\r\n            <div className=\"pwContainer\">\r\n                <label className=\"pwLabel\">Password</label>\r\n                <input type=\"password\" className=\"pwInput\" onChange={(e)=>{onSetPw(e.target.value)}}/>\r\n            </div>\r\n        </InputWrapper>\r\n    )\r\n}\r\n\r\nexport default LoginInput;","export const url = process.env.NODE_ENV === 'production' ? 'https://ji-todolist-server.herokuapp.com' : 'http://localhost:8080';\r\n\r\n// https://ji-todolist-server.herokuapp.com/","import axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport { LoginType } from '../pages/Login';\r\nimport { url } from '../config/config';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { userInfo } from '../recoil/recoil';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst BtnWrapper = styled.div`\r\n    width : 100%;\r\n    margin-top : 2rem;\r\n    display : flex;\r\n    flex-direction : column;\r\n    align-items : center;\r\n    \r\n    .loginBtn,\r\n    .joinBtn{\r\n        width : 70%;\r\n        height : 40px;\r\n        margin-top : 0.5rem;\r\n        display : flex;\r\n        align-items : center;\r\n        justify-content : center;\r\n\r\n        &:hover{\r\n            cursor : pointer;\r\n        }\r\n    }\r\n\r\n    .loginBtn{\r\n        margin-bottom: 1rem;\r\n        color: white;\r\n        background-color : lightblue;\r\n        &:hover{\r\n            background-color : skyblue;\r\n        }\r\n    }\r\n\r\n    .joinBtn{\r\n        color: gray;\r\n    }\r\n`;\r\n\r\ninterface Props extends LoginType{\r\n    onJoinDialog : ()=> void;\r\n}\r\n\r\nconst LoginBtn = ({ id, pw, onJoinDialog } : Props) =>{\r\n    const history = useHistory();\r\n    const setUserData = useSetRecoilState(userInfo);\r\n\r\n    const onLoginSubmit = async () =>{\r\n        await axios.post(`${url}/user/login`, {id: id, pw: pw}).then((e)=>{\r\n            if(e.data.result === \"fail\"){\r\n                alert(\"아이디와 비밀번호를 확인해주세요!\");\r\n            }\r\n            else{\r\n                sessionStorage.setItem(\"user_id\", e.data.result.id);\r\n                sessionStorage.setItem(\"user_nick\", e.data.result.nick);\r\n                setUserData({ id: e.data.result.id, nick: e.data.result.nick });\r\n            }\r\n        });\r\n        history.push('/Main')\r\n    }\r\n\r\n    const onJoin = () =>{\r\n        onJoinDialog();\r\n    }\r\n\r\n    return(\r\n        <BtnWrapper>\r\n            <div className=\"loginBtn\" onClick={onLoginSubmit}>로그인</div>\r\n            <div className=\"joinBtn\" onClick={onJoin}>아이디가 없으신가요?</div>\r\n        </BtnWrapper>\r\n    )\r\n}\r\n\r\nexport default LoginBtn;","import axios from 'axios';\r\nimport { ChangeEvent, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { url } from '../config/config';\r\nimport { LoginType } from '../pages/Login';\r\n\r\nconst JoinWrapper = styled.div`\r\n    width : 100%;\r\n    height : 100%;\r\n    position : absolute;\r\n    z-index : 10;\r\n    font-family: \"HSYuji-Regular\";\r\n    background-color : rgba(0,0,0,0.4);\r\n    display : flex;\r\n    align-items: center;\r\n    justify-content : center;\r\n\r\n    .joinForm{\r\n        width : 400px;\r\n        height : 600px;\r\n        background-color : white;\r\n        border-radius : 4px;\r\n        display : flex;\r\n        flex-direction : column;\r\n\r\n        .title{\r\n            text-align : center;\r\n            margin-top : 2rem;\r\n            font-weight : bold;\r\n            font-size : 1.5rem;\r\n        }\r\n\r\n        .inputWrapper{\r\n            margin : 2rem 0 0 1rem;\r\n\r\n            div{\r\n                font-weight : bold;\r\n                margin-bottom : 0.5rem;\r\n            }\r\n\r\n            input{\r\n                width : 90%;\r\n                height : 30px;\r\n                border : 1px solid lightgray;\r\n                outline : none;\r\n            }\r\n\r\n            .failPw{\r\n                font-size : 0.5rem;\r\n                color : red;\r\n            }\r\n\r\n            .idCheck{\r\n                display : flex;\r\n                input {\r\n                    width : 70%;\r\n                    margin-right : 1rem;\r\n                }\r\n\r\n                button{\r\n                    font-family: \"HSYuji-Regular\";\r\n                    border : 1px solid lightgray;\r\n                    border-radius: 4px;\r\n                    background-color : white;\r\n                    outline: none;\r\n\r\n                    &:hover{\r\n                        cursor: pointer;\r\n                        background-color : whitesmoke;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .btns{\r\n            display: flex;\r\n            justify-content : center;\r\n            margin-top : 2rem;\r\n\r\n            .joinBtn,\r\n            .cancleBtn{\r\n                width : 100px;\r\n                height : 30px;\r\n                display : flex;\r\n                align-items: center;\r\n                justify-content : center;\r\n\r\n                &:hover{\r\n                    cursor : pointer;\r\n                }\r\n            }\r\n\r\n            .joinBtn{\r\n                background-color : #EDFF75;\r\n                margin-right : 2rem;\r\n\r\n                &:hover{\r\n                    background-color : yellow;\r\n                }\r\n            }\r\n\r\n            .cancleBtn{\r\n                background-color : lightgray;\r\n\r\n                &:hover{\r\n                    background-color : gray;\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ninterface UserInfo extends LoginType{\r\n    nickName : string,\r\n}\r\n\r\ninterface Props{\r\n    closeJoinDialog : () => void;\r\n}\r\n\r\nconst Join = ({ closeJoinDialog }: Props) =>{\r\n\r\n    const [userInfo, setUserInfo] = useState<UserInfo>({ id: \"\", nickName: \"\", pw: \"\"});\r\n    const [idCheck, setIdCheck] = useState<boolean>(false);\r\n    const [pwCheck, setPwCheck] = useState<string>();\r\n    const [pwCheckFlag, setPwCheckFlag] = useState<boolean>();\r\n\r\n    const onJoinId = (e: ChangeEvent<HTMLInputElement>) =>{\r\n        setUserInfo({ ...userInfo, id : e.target.value });\r\n    }\r\n\r\n    const onJoinPw = (e: ChangeEvent<HTMLInputElement>) =>{\r\n        setUserInfo({ ...userInfo, pw : e.target.value });\r\n    }\r\n\r\n    const onJoinNick = (e: ChangeEvent<HTMLInputElement>) =>{\r\n        setUserInfo({ ...userInfo, nickName : e.target.value });\r\n    }\r\n\r\n    const onPwCheck = (e: ChangeEvent<HTMLInputElement>) =>{\r\n        setPwCheck(e.target.value);\r\n    }\r\n\r\n    const onIdCheck = () =>{\r\n        if(userInfo.id === \"\"){\r\n            alert(\"공백은 입력할 수 없습니다!\");\r\n        }\r\n        else{\r\n            axios.post(`${url}/user/idCheck`, {id : userInfo.id })\r\n                .then((e)=>{\r\n                    if(e.data.result){\r\n                        alert(\"아이디가 사용가능합니다!\")\r\n                        setIdCheck(true);\r\n                    }\r\n                    else{\r\n                        alert(\"아이디가 존재합니다\")\r\n                        setIdCheck(false);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    const onJoinBtn = () =>{\r\n        if(userInfo.id !== \"\" && userInfo.pw !== \"\" && userInfo.nickName !== \"\"){\r\n            if(pwCheckFlag){\r\n                if(!idCheck) {\r\n                    alert(\"아이디 중복확인을 해주세요\");\r\n                    return;\r\n                }\r\n                axios.post(`${url}/user/join`, { userInfo : userInfo })\r\n                    .then((e)=>{\r\n                        if(e.data.result){\r\n                            alert(\"회원가입이 완료되었습니다\");\r\n                        }\r\n                        else{\r\n                            alert(\"회원가입에 실패하였습니다\");\r\n                        }\r\n                    })\r\n                    .catch((err)=>{\r\n                        console.error(err);\r\n                    })\r\n                closeJoinDialog();\r\n                return;\r\n            }\r\n            else{\r\n                alert(\"비밀번호를 확인해주세요\");\r\n                return;\r\n            }\r\n        }\r\n        else{\r\n            alert(\"항목들을 전부 입력해주세요!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    const onCancleBtn = () =>{\r\n        closeJoinDialog();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(userInfo.pw !== \"\" && pwCheck !== \"\"){\r\n            if(userInfo.pw === pwCheck){\r\n                setPwCheckFlag(true);\r\n            }\r\n            else{\r\n                setPwCheckFlag(false);\r\n            }\r\n        }\r\n    },[userInfo.pw, pwCheck])\r\n\r\n    return(\r\n        <JoinWrapper>\r\n            <div className=\"joinForm\">\r\n                <div className=\"title\">회원가입</div>\r\n                <div className=\"inputWrapper\">\r\n                    <div>아이디</div>\r\n                    <div className=\"idCheck\">\r\n                        <input type=\"text\" onChange={(e)=>onJoinId(e)}></input>\r\n                        <button onClick={onIdCheck}>중복확인</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"inputWrapper\">\r\n                    <div>닉네임</div>\r\n                    <input type=\"text\" onChange={(e)=>onJoinNick(e)}></input>\r\n                </div>\r\n                <div className=\"inputWrapper\">\r\n                    <div>비밀번호</div>\r\n                    <input type=\"password\" onChange={(e)=>onJoinPw(e)}></input>\r\n                </div>\r\n                <div className=\"inputWrapper\">\r\n                    <div>비밀번호 확인</div>\r\n                    <input type=\"password\" onChange={(e)=>onPwCheck(e)}></input>\r\n                    {!pwCheckFlag && userInfo.pw && pwCheck && <div className=\"failPw\">비밀번호를 확인해주세요</div>}\r\n                </div>\r\n                <div className=\"btns\">\r\n                    <div className=\"joinBtn\" onClick={onJoinBtn}>회원가입</div>\r\n                    <div className=\"cancleBtn\" onClick={onCancleBtn}>취소</div>\r\n                </div>\r\n            </div>\r\n        </JoinWrapper>\r\n    )\r\n}\r\n\r\nexport default Join;","import styled from 'styled-components';\r\nimport LoginInput from '../components/LoginInput';\r\nimport LoginBtn from '../components/LoginBtn';\r\nimport {  useState } from 'react';\r\nimport Join from '../components/Join';\r\n\r\nexport interface LoginType  {\r\n    id : string,\r\n    pw : string\r\n}\r\n\r\nconst LoginWrapper = styled.div`\r\n    width : 100vw;\r\n    height : 100vh;\r\n    display : flex;\r\n    align-items : center;\r\n    justify-content : center;\r\n    position : relative;\r\n\r\n    .loginForm{\r\n        background-color : none;\r\n        width : 450px;\r\n        height : 600px;\r\n        color : black;\r\n        font-family: 'HSYuji-Regular';\r\n        display : flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        z-index : 1;\r\n\r\n        .title{\r\n            font-size : 3rem;\r\n            margin : 3rem 0;\r\n        }\r\n    }\r\n`;\r\nconst Login = () =>{\r\n\r\n    const [loginInfo, setLoginInfo] = useState<LoginType>({ id: \"\", pw: \"\"});\r\n    const [onJoin, setOnJoin] = useState<boolean>(false);\r\n\r\n    const onSetId = (id: string) =>{\r\n        setLoginInfo({ id : id, pw: loginInfo.pw });\r\n    }\r\n\r\n    const onSetPw = (pw: string) =>{\r\n        setLoginInfo({ id: loginInfo.id, pw: pw });\r\n    }\r\n\r\n    const onJoinDialog = () =>{\r\n        setOnJoin(true);\r\n    }\r\n\r\n    const closeJoinDialog = () =>{\r\n        setOnJoin(false);\r\n    }\r\n\r\n    return(\r\n        <LoginWrapper>\r\n            { onJoin \r\n            ? <Join closeJoinDialog = {closeJoinDialog}/>\r\n            :<div className=\"loginForm\">\r\n                <div className=\"title\">WelCome!</div>\r\n                <LoginInput onSetId={onSetId} onSetPw={onSetPw}/>\r\n                <LoginBtn id = {loginInfo.id} pw = {loginInfo.pw} onJoinDialog={onJoinDialog}/>\r\n            </div>\r\n            }\r\n        </LoginWrapper>\r\n    )\r\n}\r\n\r\nexport default Login;","import styled from 'styled-components';\r\nimport { TodoItemType } from '../recoil/recoil';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport { useState } from 'react';\r\n\r\ninterface Props {\r\n    list : TodoItemType;\r\n    onItemRemove : (id : number)=> void;\r\n}\r\n\r\ninterface TodoState{\r\n    fontColor : string;\r\n    checkColor : string;\r\n}\r\n\r\nconst ItemWrapper = styled.div<TodoState>`\r\n    width : 100%;\r\n    display : flex;\r\n    margin : 1rem 0 0 1rem;\r\n    font-size : 1.2rem;\r\n\r\n    .checkIcon{\r\n        font-size : 1.5rem;\r\n        color : ${(props)=>props.checkColor};\r\n\r\n        &:hover{\r\n            cursor : pointer;\r\n        }\r\n    }\r\n\r\n    .content{\r\n        color : ${(props)=>props.fontColor};\r\n        margin-left : 1rem;\r\n        width : 70%;\r\n        overflow: hidden;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n    }\r\n    \r\n    .closeBtn{\r\n        font-size : 1.5rem;\r\n        color : gray;\r\n        &:hover{\r\n            cursor : pointer;\r\n            color : red;\r\n        }\r\n    }\r\n\r\n    @media only screen and (max-width: 1000px) {\r\n        width : 80%;\r\n    }\r\n`;\r\nconst TodoListItem = ({ list, onItemRemove }: Props) =>{\r\n    const [todoState, setTodoState] = useState<TodoState>({ fontColor : \"black\", checkColor : \"gray\"})\r\n\r\n    const onListCheck = () =>{\r\n        if(todoState.fontColor === \"black\"){\r\n            setTodoState({ fontColor : \"lightgray\", checkColor : \"green\"});\r\n        }\r\n        else{\r\n            setTodoState({ fontColor : \"black\", checkColor : \"gray\"});\r\n        }\r\n    }\r\n\r\n    return(\r\n        <ItemWrapper fontColor={todoState.fontColor} checkColor={todoState.checkColor}>\r\n            <CheckCircleOutlineIcon className=\"checkIcon\" onClick={onListCheck}/>\r\n            <div className=\"content\">{list.content}</div>\r\n            <HighlightOffIcon className=\"closeBtn\" onClick={()=>onItemRemove(list.id)} />\r\n        </ItemWrapper>\r\n    )\r\n}\r\n\r\nexport default TodoListItem;","import styled from 'styled-components';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport { useState } from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport { listDate, todoListArray } from '../recoil/recoil';\r\nimport { EventAvailable } from '@material-ui/icons';\r\n\r\nconst SubStyled = styled.div`\r\n    z-index : 10;\r\n    display : flex;\r\n    flex-direction : column;\r\n\r\n    .addCalendar{\r\n        display : flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width : 60px;\r\n        height : 60px;\r\n        border-radius : 4px;\r\n        background-color : white;\r\n        border : 2px solid #EDFF75;\r\n        outline : none;\r\n\r\n        .calendarIcon{\r\n            font-size: 3rem;\r\n        }\r\n\r\n        &:hover{\r\n            cursor : pointer;\r\n            background-color: whitesmoke;\r\n        }\r\n    }\r\n\r\n    .calendarWrapper{\r\n        position : relative;\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        .calendar{\r\n            top: 0;\r\n            left: 0;\r\n            position : absolute;\r\n        }\r\n    }\r\n\r\n    .playBtn{\r\n        font-size : 3rem;\r\n\r\n        &:hover{\r\n            color : darkblue;\r\n            cursor : pointer;\r\n        }\r\n    }\r\n\r\n    @media only screen and (max-width: 480px) {\r\n        flex-direction: row;\r\n\r\n        .addCalendar{\r\n            width: 40px;\r\n            height: 40px;\r\n\r\n            .calendarIcon{\r\n                font-size: 1.5rem;\r\n            }\r\n        }\r\n\r\n        .calendarWrapper{\r\n            position: static;\r\n            .calendar{\r\n                position : absolute;\r\n                top: 0;\r\n                left: 0;\r\n                width: 100vw;\r\n                height: 50%;\r\n        \r\n                .react-calendar {\r\n                    width: 100%;\r\n                    height : 100%;\r\n                    border: 1px solid #a0a096;\r\n                    font-family: Arial, Helvetica, sans-serif;\r\n                    line-height: 1.125em;\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\nconst TodoListCalendar = () =>{\r\n\r\n    const [onCalendar, setOnCalendar] = useState<boolean>(false);\r\n\r\n    const todoList = useRecoilValue(todoListArray);\r\n    const setListDateValue = useSetRecoilState(listDate);\r\n\r\n    const onToggleCalendar = () =>{\r\n        setOnCalendar(!onCalendar);\r\n    }\r\n\r\n    const onChangeDate = (e: Date) =>{\r\n        const date = `${e.getFullYear()}-${e.getMonth()+1}-${e.getDate()}`;\r\n        setListDateValue(date);\r\n        setOnCalendar(false);\r\n    }\r\n\r\n    return(\r\n        <SubStyled>\r\n            <button className=\"addCalendar\" onClick={onToggleCalendar}>\r\n                <EventAvailable className=\"calendarIcon\"/>\r\n            </button>\r\n            <div className=\"calendarWrapper\">\r\n                { onCalendar && <div className=\"calendar\">\r\n                    <Calendar onChange={onChangeDate} calendarType=\"Hebrew\" value={todoList.date} />\r\n                </div>}\r\n            </div>\r\n        </SubStyled>\r\n    )\r\n}\r\n\r\nexport default TodoListCalendar;","\r\nimport { ExitToApp } from '@material-ui/icons';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n    onLogOut: () => void;\r\n}\r\n\r\nconst LogOutWrapper = styled.div`\r\n    .logOutBtn{\r\n        width : 60px;\r\n        height : 60px;\r\n        border-radius : 4px;\r\n        background-color : white;\r\n        border : 2px solid #EDFF75;\r\n        outline : none;\r\n        display : flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        .ExitIcon{\r\n            font-size: 3rem;\r\n        }\r\n\r\n        &:hover{\r\n            cursor : pointer;\r\n            background-color: whitesmoke;\r\n        }\r\n    }\r\n\r\n    @media only screen and (max-width: 480px) {\r\n        .logOutBtn{\r\n            width: 40px;\r\n            height: 40px;\r\n\r\n            .ExitIcon{\r\n                font-size: 1.5rem;\r\n            }\r\n        }\r\n    }\r\n`;\r\nconst TodoListLogOutBtn = ({ onLogOut }: Props) =>{\r\n    return(\r\n        <LogOutWrapper>\r\n            <div className=\"logOutBtn\" onClick={onLogOut} >\r\n                <ExitToApp className=\"ExitIcon\"/>\r\n            </div>\r\n        </LogOutWrapper>\r\n    )\r\n}\r\n\r\nexport default TodoListLogOutBtn;","import { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TimeWrapper = styled.div`\r\n    width : 200px;\r\n    margin-left : 1rem;\r\n    font-size : 2rem;\r\n\r\n    @media only screen and (max-width: 480px) {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 100px;\r\n        height: 40px;\r\n        font-size: 1rem;\r\n    }\r\n`;\r\nconst TodoListTime = () =>{\r\n\r\n    const [time, setTime] = useState(new Date());\r\n\r\n    useEffect(()=>{\r\n        const timer = setInterval(()=>{\r\n            setTime(new Date());\r\n        },1000);\r\n\r\n        return () => clearInterval(timer);\r\n    },[]);\r\n\r\n\r\n    return(\r\n        <TimeWrapper>\r\n            {time.getHours() < 10 ? \"0\" + time.getHours() : time.getHours()}\r\n            :{time.getMinutes() < 10 ? \"0\" + time.getMinutes() : time.getMinutes()}\r\n            :{time.getSeconds() < 10 ? \"0\" + time.getSeconds() : time.getSeconds()}\r\n        </TimeWrapper>\r\n    )\r\n}\r\n\r\nexport default TodoListTime;","import styled from 'styled-components';\r\nimport TodoListCalendar from './TodoListCalendar';\r\nimport TodoListLogOutBtn from './TodoListLogOutBtn';\r\nimport TodoListTime from './TodoListTime';\r\n\r\nconst SubWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .btns{\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    @media only screen and (max-width: 1000px) {\r\n        justify-content: space-around;\r\n        flex-direction: row;\r\n        align-items: center;\r\n\r\n        .btns{\r\n            flex-direction: row;\r\n        }\r\n    }\r\n`\r\n\r\ninterface Props {\r\n    onLogOut: () => void;\r\n}\r\n\r\nconst TodoListSub = ({ onLogOut }: Props) =>{\r\n\r\n\r\n    return(\r\n        <SubWrapper>\r\n            <TodoListTime />\r\n            <div className=\"btns\">\r\n                <TodoListLogOutBtn onLogOut={onLogOut} />\r\n                <TodoListCalendar />\r\n            </div>\r\n        </SubWrapper>\r\n    )\r\n}\r\n\r\nexport default TodoListSub;","import React, { useEffect } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport styled from 'styled-components';\r\nimport { todoListArray, TodoItemType, userInfo, listDate } from '../recoil/recoil';\r\nimport TodoListItem from './TodoListItem';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport axios from 'axios';\r\nimport { url } from '../config/config';\r\nimport TodoListSub from './TodoListSub';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst MainWrapper = styled.div`\r\n\r\n    margin-left : 10%;\r\n    display: flex;\r\n\r\n    .body{\r\n        background-color : white;\r\n        border : 2px solid #EDFF75;\r\n        width : 600px;\r\n        height : 600px;\r\n        border-radius : 20px;\r\n        z-index : 1;\r\n        display : flex;\r\n        flex-direction : column;\r\n\r\n        .line{\r\n            margin : 1rem 0 0 1rem;\r\n            width : 100%;\r\n            height : 3px;\r\n            background-color : lightgray;\r\n        }\r\n\r\n        .title{\r\n            width : 80%;\r\n            height : 10%;\r\n            margin : 1rem 0 0 1rem;\r\n            font-size : 1.2rem;\r\n            font-weight : bold;\r\n        }\r\n\r\n        .lists{\r\n            width : 100%;\r\n            height : 80%;\r\n        }\r\n\r\n        .addBtn{\r\n            width : 100%;\r\n            height : 10%;\r\n            display : flex;\r\n            align-items: center;\r\n            justify-content : center;\r\n\r\n            .addIcon{\r\n                font-size : 2rem;\r\n                color : green;\r\n\r\n                &:hover{\r\n                    color : darkgreen;\r\n                    cursor : pointer;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    @media only screen and (max-width: 1000px) {\r\n        width: 100%;\r\n        margin : 0;\r\n        flex-direction: column-reverse;\r\n\r\n        .body{\r\n            width: 100%;\r\n            height: 600px;\r\n        }\r\n    }\r\n`;\r\n\r\ninterface Props{\r\n    onOpenDialog: () => void;\r\n}\r\n\r\ninterface Items{\r\n    id: number;\r\n    user_id: string;\r\n    content_date: string;\r\n    content: string;\r\n}\r\n\r\nconst TodoListMain = ({ onOpenDialog }: Props) =>{\r\n\r\n    const history = useHistory();\r\n    const [userData, setUserData] = useRecoilState(userInfo);\r\n    const listDateValue = useRecoilValue(listDate);    \r\n    const [todoList, setTodoList] = useRecoilState(todoListArray);\r\n\r\n    useEffect(()=>{\r\n        axios.post(`${url}/board/loadBoard`, { userId: userData.id, date: listDateValue })\r\n        .then((v)=>{\r\n            const item: TodoItemType[] = [];\r\n            // eslint-disable-next-line array-callback-return\r\n            v.data.result.map((items: Items)=>{\r\n                item.push({ id: items.id, userId: items.user_id, content: items.content });\r\n            })\r\n            setTodoList({ date: new Date(Date.parse(listDateValue)), item: [...item] })\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    },[listDateValue, setTodoList, userData.id]);\r\n\r\n    const onItemRemove = (id : number): void =>{\r\n        axios.post(`${url}/board/deleteBoard`,{ id: id })\r\n        .then((v)=>{\r\n            if(v.data.result){\r\n                const result: TodoItemType[] = todoList.item.filter((item) => item.id !== id)\r\n                setTodoList({ date : todoList.date, item : [...result] });\r\n            }\r\n            else{\r\n                alert(\"게시글 삭제에 실패했습니다\");\r\n            }\r\n        })\r\n    }\r\n\r\n    const onLogOut = () =>{\r\n        setUserData({ id: \"\", nick: \"\"});\r\n        sessionStorage.setItem(\"user_id\", \"\");\r\n        sessionStorage.setItem(\"user_nick\", \"\");\r\n        history.push('/Main');\r\n    }\r\n\r\n    return(\r\n        <MainWrapper>\r\n            <div className=\"body\">\r\n                <div className = \"title\">\r\n                    { !isNaN(todoList.date.getFullYear()) && <div>{todoList.date.getFullYear()}년 {todoList.date.getMonth()+1}월 {todoList.date.getDate()}일</div>}\r\n                    <div className = \"line\" />\r\n                </div>\r\n                <div className=\"lists\">\r\n                    {todoList.item.map((v) =>{\r\n                        return( \r\n                        <TodoListItem key={v.id} list={v} onItemRemove={onItemRemove}/>\r\n                    )})}\r\n                </div>\r\n                <div className=\"addBtn\" onClick={onOpenDialog}><AddCircleOutlineIcon className=\"addIcon\"/></div>\r\n            </div>\r\n            <TodoListSub onLogOut ={onLogOut}/>\r\n        </MainWrapper>\r\n    )\r\n}\r\n\r\nexport default TodoListMain;","import axios from 'axios';\r\nimport { useRef } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport styled from 'styled-components';\r\nimport { url } from '../config/config';\r\nimport { listDate, todoListArray, userInfo } from '../recoil/recoil';\r\n\r\nconst DialogWrapper = styled.div`\r\n    position : absolute;\r\n    background-color : rgba(0,0,0,0.4);\r\n    width : 100%;\r\n    height : 100%;\r\n    top: 0;\r\n    left: 0;\r\n    z-index : 100;\r\n    display : flex;\r\n    align-items: center;\r\n    justify-content : center;\r\n\r\n    .body{\r\n        width: 300px;\r\n        height : 200px;\r\n        border-radius : 20px;\r\n        background-color : white;\r\n\r\n        .header{\r\n            border-radius : 20px 20px 0 0;\r\n            height: 50px;\r\n            background-color : #EDFF75;\r\n            display : flex;\r\n            align-items : center;\r\n            justify-content : center;\r\n        }\r\n\r\n        .main{\r\n            height : 150px;\r\n            display : flex;\r\n            flex-direction : column;\r\n            align-items: center;\r\n\r\n            .inputer { \r\n                width : 80%;\r\n                height : 30px;\r\n                border : 3px solid lightgray;\r\n                outline : none;\r\n            }\r\n\r\n            .btns{\r\n                margin-top : 2rem;\r\n\r\n                .successBtn,\r\n                .cancleBtn{\r\n                    border : none;\r\n                    border-radius : 8px;\r\n                    outline : none;\r\n                    width : 60px;\r\n                    height : 30px;\r\n                    font-family: 'HSYuji-Regular';\r\n\r\n                    &:hover{\r\n                        cursor : pointer;\r\n                    }\r\n                }\r\n\r\n                .successBtn{\r\n                    background-color : #EDFF75;\r\n                    margin-right : 1rem;\r\n\r\n                    &:hover{\r\n                        background-color : yellow;\r\n                    }\r\n                }\r\n\r\n                .cancleBtn{\r\n                    &:hover{\r\n                        background-color : gray;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ninterface Props{\r\n    onCloseDialog: () => void;\r\n}\r\n\r\nconst TodoListDialog = ({ onCloseDialog } : Props) =>{\r\n\r\n    const [todoList, setTodoList] = useRecoilState(todoListArray);\r\n    const userData = useRecoilValue(userInfo);\r\n    const listDateValue = useRecoilValue(listDate);\r\n    const textRef = useRef<HTMLInputElement>(null);\r\n\r\n    const onSuccessBtn = () =>{\r\n        const value: string = textRef.current!.value;\r\n        const boardInfo = { userId: userData.id, date: listDateValue, content: value };\r\n        axios.post(`${url}/board/addBoard`,{...boardInfo})\r\n        .then((e)=>{\r\n            if(e.data.result){\r\n                setTodoList({ date : new Date(Date.parse(listDateValue)), item: [...todoList.item, { id : e.data.id, userId: userData.id, content : value}]});\r\n            }\r\n            else{\r\n                alert(\"게시글 등록에 실패했습니다\");\r\n            }\r\n        })\r\n        onCloseDialog();\r\n    }\r\n\r\n    return(\r\n        <DialogWrapper>\r\n            <div className=\"body\">\r\n                <div className=\"header\">추가 하실 내용을 입력해주세요!</div>\r\n                <div className=\"main\">\r\n                    <input className=\"inputer\" type = \"text\" ref={textRef}/>\r\n                    <div className=\"btns\">\r\n                        <button className=\"successBtn\" onClick={onSuccessBtn}>완료</button>\r\n                        <button className=\"cancleBtn\" onClick={onCloseDialog}>취소</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </DialogWrapper>\r\n    )\r\n}\r\n\r\nexport default TodoListDialog;","import styled from 'styled-components';\r\nimport TodoListMain from '../components/TodoListMain';\r\nimport TodoListDialog from '../components/TodoListDialog';\r\nimport { useState } from 'react';\r\n\r\nconst TodoWrapper = styled.div`\r\n    width : 100vw;\r\n    height : 100vh;\r\n    font-family: 'HSYuji-Regular';\r\n\r\n    .main{\r\n        width : 100%;\r\n        height : 100%;\r\n        display : flex;\r\n        flex-direction : column;\r\n        justify-content : center;\r\n    }\r\n`;\r\n\r\nconst TodoList = () =>{\r\n\r\n    const [dialog, setDialog] = useState<boolean>(false);\r\n\r\n    const onOpenDialog = () =>{\r\n        setDialog(true);\r\n    }\r\n\r\n    const onCloseDialog = () =>{\r\n        setDialog(false);\r\n    }\r\n\r\n    return(\r\n        <TodoWrapper>\r\n            { dialog && <TodoListDialog onCloseDialog={onCloseDialog} />}\r\n            <div className=\"main\">\r\n                <TodoListMain onOpenDialog={onOpenDialog} />\r\n            </div>\r\n        </TodoWrapper>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import { useLayoutEffect } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport { userInfo } from '../recoil/recoil';\r\nimport Login from './Login';\r\nimport TodoList from './TodoList';\r\n\r\nconst Main = () =>{\r\n\r\n    const [userData, setUserData] = useRecoilState(userInfo);\r\n\r\n    useLayoutEffect(()=>{\r\n        const id: string = sessionStorage.getItem('user_id') ? sessionStorage.getItem('user_id') as string : \"\";\r\n        const nick: string = sessionStorage.getItem(\"user_nick\") ? sessionStorage.getItem(\"user_nick\") as string : \"\";\r\n        setUserData({ id: id, nick: nick});\r\n    },[setUserData])\r\n\r\n    return(\r\n        <div>\r\n            {userData.id !== \"\" && userData.nick !== \"\"\r\n            ? <TodoList />\r\n            : <Login />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","export default __webpack_public_path__ + \"static/media/background.732080b0.jpg\";","import { Route } from 'react-router';\nimport styled from 'styled-components';\nimport Home from './pages/Home';\nimport Main from './pages/Main';\nimport BACKGROUND from './images/background.jpg';\nimport './styles/global.css';\n\nconst AppWrapper = styled.div`\n    position : relative;\n\n    .background{\n        z-index : -1;\n        position: absolute;\n        top: 0;\n        left : 0;\n        width : 100%;\n        height : 100%;\n        opacity : 0.7;        \n\n        img{\n          width: 100%;\n          height : 100%;\n          object-fit : cover;\n        }\n    }\n`;\nfunction App() {\n\n  return (\n    <AppWrapper>\n      <div className=\"background\">\n            <img src={BACKGROUND} alt = \"배경\"/>\n        </div>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/Main\" component={Main} /> \n    </AppWrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/todolistClient\">\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}